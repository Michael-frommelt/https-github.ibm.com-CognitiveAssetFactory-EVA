{"docs":[{
  "_id": "_design/3921ebfb6739a71d307b5a44a0fa4585922cb80c",
  "language": "query",
  "views": {
    "3921ebfb6739a71d307b5a44a0fa4585922cb80c": {
      "map": {
        "fields": {
          "date": "desc"
        },
        "partial_filter_selector": {}
      },
      "reduce": "_count",
      "options": {
        "def": {
          "fields": [{
            "date": "desc"
          }]
        }
      }
    }
  }
}, {
  "_id": "_design/ea0e6019ad5550d70970c675ac448ff2229b2e7d",
  "language": "query",
  "views": {
    "date-index": {
      "map": {
        "fields": {
          "date": "asc"
        },
        "partial_filter_selector": {}
      },
      "reduce": "_count",
      "options": {
        "def": {
          "fields": [
            "date"
          ]
        }
      }
    }
  }
}, {
  "_id": "_design/testing",
  "options": {
    "epi": {
      "dbcopy": {
        "getTestResultByFile_conf": "view_result_testing",
        "getTestResultByFile_id": "view_result_testing",
        "getTestResultByFile_intent": "view_result_testing",
        "getTestResultByFile_total": "view_result_testing",
        "getTestResultByIntent_conf": "view_result_testing",
        "getTestResultByIntent_id": "view_result_testing",
        "getTestResultByIntent_intent": "view_result_testing",
        "getTestResultByIntent_total": "view_result_testing",
        "getTestcasePerformance": "view_result_testing",
        "getTeststepPerformance": "view_result_testing",
        "getIntentsForTests": "view_result_testing"
      }
    }
  },
  "value": {
    "rev": "63-8bfcc3ee4777bf03cdf7d16f809b4d65"
  },
  "key": "_design/testing",
  "language": "javascript",
  "views": {
    "getTestcasePerformance": {
      "map": "function (doc) {\n  emit([doc.date, doc.id, doc.clientId, 'getTestcasePerformance'], doc.correctAnswerId);\n}",
      "reduce": "function (keys, values, rereduce) {\n  for (var index in values) {\n    if (!values[index]) {\n      return 0;\n    }  \n  }\n  return 1;\n}"
    },
    "getTestTimes": {
      "reduce": "_count",
      "map": "function (doc) {\n  emit([doc.date, doc.timestamp, doc.clientId], 1);\n}"
    },
    "getTestRuns": {
      "reduce": "_count",
      "map": "function (doc) {\n  emit([doc.timestamp, doc.date, doc.clientId], 1);\n}"
    },
    "getTeststepPerformance": {
      "map": "function (doc) {\n  emit([doc.date, doc.id, doc.clientId, 'getTeststepPerformance'], doc.correct);\n}",
      "reduce": "function (keys, values, rereduce) {\n  for (var index in values) {\n    if (!values[index]) {\n      return 0;\n    }  \n  }\n  return 1;\n}"
    },
    "getTestResultByFile_conf": {
      "reduce": "_sum",
      "map": "function (doc) {\n    emit([doc.date, doc.test.test_file, doc.timestamp, doc.clientId, 'getTestResultByFile', 'avgConfidence', doc.clientId], doc.body.confidence)\n}"
    },
    "getTestResultByFile_id": {
      "reduce": "_sum",
      "map": "function (doc) {\n    emit([doc.date, doc.test.test_file, doc.timestamp, doc.clientId, 'getTestResultByFile', 'numCorrectAnswerId', doc.clientId], (doc.correctAnswerId ? 1:0))\n}"
    },
    "getTestResultByFile_total": {
      "reduce": "_count",
      "map": "function (doc) {\n    emit([doc.date, doc.test.test_file, doc.timestamp, doc.clientId, 'getTestResultByFile', 'testTotal', doc.clientId], 1)\n}"
    },
    "getTestResultByFile_intent": {
      "reduce": "_sum",
      "map": "function (doc) {\n    emit([doc.date, doc.test.test_file, doc.timestamp, doc.clientId, 'getTestResultByFile', 'numCorrectIntent', doc.clientId], (doc.correctTopIntent ? 1:0))\n}"
    },
    "getIntentsForTests": {
      "reduce": "_count",
      "map": "function (doc) {\n  if (doc.test.intent !== \"INTENTLESS\" && doc.test.intent !== \"\" && doc.test.intent !== \"ABC\" && doc.test.intent !== \"abc\"){\n  emit([doc.clientId, doc.test.intent, doc.body.topIntent, 'getIntentsForTests', doc.date], 1);\n  }\n}"
    },
    "getTestResultByIntent_conf": {
      "reduce": "_sum",
      "map": "function (doc) {\n    emit([doc.date, doc.test.intent, doc.timestamp, doc.clientId, 'getTestResultByIntent', 'avgConfidence', doc.clientId], doc.body.confidence)\n}"
    },
    "getTestResultByIntent_id": {
      "reduce": "_sum",
      "map": "function (doc) {\n    emit([doc.date, doc.test.intent, doc.timestamp, doc.clientId, 'getTestResultByIntent', 'numCorrectAnswerId', doc.clientId], (doc.correctAnswerId ? 1:0))\n}"
    },
    "getTestResultByIntent_intent": {
      "reduce": "_sum",
      "map": "function (doc) {\n    emit([doc.date, doc.test.intent, doc.timestamp, doc.clientId, 'getTestResultByIntent', 'numCorrectIntent', doc.clientId], (doc.correctTopIntent ? 1:0))\n}"
    },
    "getTestResultByIntent_total": {
      "reduce": "_count",
      "map": "function (doc) {\n    emit([doc.date, doc.test.intent, doc.timestamp, doc.clientId, 'getTestResultByIntent', 'testTotal', doc.clientId], 1)\n}"
    },
    "aggregateTestResults": {
      "reduce": "_sum",
      "map": "function (doc) {\n  emit([doc.timestamp, doc.date], [(doc.correctAnswerId ? 1:0), (doc.correctAnswerId ? 0:1), (doc.correctTopIntent ? 1:0), (doc.correctTopIntent ? 0:1) ,1]);\n}"
    }
  }
}]}
